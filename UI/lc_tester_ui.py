#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25
#  in conjunction with Tcl version 8.6
#    Aug 22, 2019 03:58:50 PM EDT  platform: Windows NT

import sys
sys.path.append('../src')

from processor import Processor
from TestCaseList import TestCaseList
from TestResultList import TestResultList
import time

import PIL.Image
import PIL.ImageTk


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import lc_tester_ui_support

def main():
    '''Starting point when module is the main routine.'''
    print('running')
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    lc_tester_ui_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    lc_tester_ui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("824x668+809+294")
        top.title("LC Reg Tester")
        #top.wm_iconbitmap('instapy_icon.ico')
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.codeText = tk.Text(top)
        self.codeText.place(relx=0.036, rely=0.06, relheight=0.575
                , relwidth=0.648)
        self.codeText.configure(background="white")
        self.codeText.configure(font="-family {Segoe UI} -size 12")
        self.codeText.configure(foreground="black")
        self.codeText.configure(highlightbackground="#d9d9d9")
        self.codeText.configure(highlightcolor="black")
        self.codeText.configure(insertbackground="black")
        self.codeText.configure(selectbackground="#c4c4c4")
        self.codeText.configure(selectforeground="black")
        self.codeText.configure(wrap="word")

        self.codeLbl = tk.Label(top)
        self.codeLbl.place(relx=0.036, rely=0.015, height=21, width=103)
        self.codeLbl.configure(activebackground="#f9f9f9")
        self.codeLbl.configure(activeforeground="black")
        self.codeLbl.configure(background="#d9d9d9")
        self.codeLbl.configure(disabledforeground="#a3a3a3")
        self.codeLbl.configure(foreground="#000000")
        self.codeLbl.configure(highlightbackground="#d9d9d9")
        self.codeLbl.configure(highlightcolor="black")
        self.codeLbl.configure(text='''Please Enter Code:''')

        self.TestCaseFrame = tk.Frame(top)
        self.TestCaseFrame.place(relx=0.085, rely=0.659, relheight=0.322
                , relwidth=0.904)
        self.TestCaseFrame.configure(relief='groove')
        self.TestCaseFrame.configure(borderwidth="2")
        self.TestCaseFrame.configure(relief="groove")
        self.TestCaseFrame.configure(background="#d9d9d9")
        self.TestCaseFrame.configure(highlightbackground="#d9d9d9")
        self.TestCaseFrame.configure(highlightcolor="black")

        # add TestCaseList
        self.test_list = TestCaseList(self.TestCaseFrame)
        self.test_list.pack(side="top", fill="both", expand=True)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.runBtn = tk.Button(top)
        self.runBtn.place(relx=0.765, rely=0.554, height=44, width=97)
        self.runBtn.configure(activebackground="#ececec")
        self.runBtn.configure(activeforeground="#000000")
        self.runBtn.configure(background="#d9d9d9")
        self.runBtn.configure(disabledforeground="#a3a3a3")
        self.runBtn.configure(font=font9)
        self.runBtn.configure(foreground="#000000")
        self.runBtn.configure(highlightbackground="#d9d9d9")
        self.runBtn.configure(highlightcolor="black")
        self.runBtn.configure(pady="0")
        self.runBtn.configure(text='''Run''')
        self.runBtn.configure(command=self.run)

        im = PIL.Image.open("add_btn_white.png")
        add_icon = PIL.ImageTk.PhotoImage(im)
        self.addCaseBtn = tk.Button(top, image=add_icon)
        self.addCaseBtn.image = add_icon
        self.addCaseBtn.place(relx=0.036, rely=0.659, height=34, width=37)
        self.addCaseBtn.configure(activebackground="#ececec")
        self.addCaseBtn.configure(activeforeground="#000000")
        self.addCaseBtn.configure(background="#d9d9d9")
        self.addCaseBtn.configure(disabledforeground="#a3a3a3")
        self.addCaseBtn.configure(foreground="#000000")
        self.addCaseBtn.configure(highlightbackground="#d9d9d9")
        self.addCaseBtn.configure(highlightcolor="black")
        self.addCaseBtn.configure(pady="0")
        self.addCaseBtn.configure(command=self.addTestCase)

        im = PIL.Image.open("del_btn_white.png")
        del_icon = PIL.ImageTk.PhotoImage(im)
        self.delCaseBtn = tk.Button(top, image=del_icon)
        self.delCaseBtn.image = del_icon
        self.delCaseBtn.place(relx=0.036, rely=0.734, height=34, width=37)
        self.delCaseBtn.configure(activebackground="#ececec")
        self.delCaseBtn.configure(activeforeground="#000000")
        self.delCaseBtn.configure(background="#d9d9d9")
        self.delCaseBtn.configure(disabledforeground="#a3a3a3")
        self.delCaseBtn.configure(foreground="#000000")
        self.delCaseBtn.configure(highlightbackground="#d9d9d9")
        self.delCaseBtn.configure(highlightcolor="black")
        self.delCaseBtn.configure(pady="0")
        self.delCaseBtn.configure(command=self.delTestCase)

        self.resultListWindow = None
        self.isResultWindowActive = False
        self.test_results_list = None

    def run(self):
        if self.isResultWindowActive:
            self.resultListWindow.destroy()
        p = Processor(self.codeText.get('1.0', 'end'))
        cases = self.test_list.getTestInAndOut()
        results = []
        for case in cases:
            p.setInputs(case['input'])
            p.setOutput(case['output'])
            results.append(p.startTest())
        print(results)

        # create result list in a new window
        self.resultListWindow = tk.Tk()
        self.resultListWindow.protocol("WM_DELETE_WINDOW", self.on_quit)
        self.isResultWindowActive = True
        self.resultListWindow.wm_title("Test Results")
        self.test_results_list = TestResultList(self.resultListWindow)
        self.test_results_list.pack(side="top", fill="both", expand=True)

        for result in results:
            self.test_results_list.addTestResult(result)
        self.resultListWindow.mainloop()

    def on_quit(self):
        self.isResultWindowActive = False
        self.resultListWindow.destroy()

    def addTestCase(self):
        self.test_list.addTestCase()

    def delTestCase(self):
        self.test_list.delTestCase()


if __name__ == '__main__':
    main()





